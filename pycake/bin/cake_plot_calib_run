#!/usr/bin/env python

import argparse
from pprint import pformat


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Tool to visualize a single calibration run.")
    parser.add_argument("calibdir", type=str, help="calibration directory")
    parser.add_argument("experiment", type=str, help="experiment name, e.g. V_convoffx")
    parser.add_argument("neuron", type=int, help="neuron on hicann Enum., e.g. 0")
    parser.add_argument("parameter_name", type=str, help="parameter name for x axis")
    parser.add_argument("--traces", action="store_true", help="plot ALL the traces")
    parser.add_argument("--outfile", "-o", type=str, help="Output file. if not given, an interactive (X11) back-end is used")
    parser.add_argument("--outfile_traces", type=str, help="Output file for traces. if not given, an interactive (X11) back-end is used")
    parser.add_argument("--list-only", "-l", action="store_true", help="only show available keys")
    args = parser.parse_args()

    if args.outfile:
        import matplotlib
        matplotlib.use("agg")

    # import pylab _AFTER_ matplotlib use statement
    import pylab as p

    import pyhalbe
    from pyhalco_common import Enum
    from pyhalco_hicann_v2 import NeuronOnHICANN
    from pycake.calibrationrunner import CalibrationRunner
    from pycake.reader import Reader
    from pyhalbe.HICANN import neuron_parameter

    runner = CalibrationRunner.load(args.calibdir)
    reader = Reader(runner)

    if args.list_only:
        print "=== available neurons: =========="
        print pformat([str(i.toEnum()) for i in reader.get_neurons()])

        print "=== available parameters: ======="
        print pformat(reader.get_parameters())

    if args.experiment in reader.get_parameters():
        exp_names = args.experiment
    else:
        exp_names = eval("{}".format(args.experiment))
    unit = reader.get_calibration_unit(exp_names)

    experiment = unit.experiment

    available_keys = list(set((kk
        for jj in experiment.results
        for ii in jj.values()
        for kk in ii)))

    if args.list_only:
        print "=== available keys: ============="
        print available_keys

        print "=== valid parameter names: ======"
        print pformat(
            [i for i in dir(neuron_parameter) if not i.startswith("_")])
        exit(0)

    neuron = NeuronOnHICANN(Enum(args.neuron))

    x = experiment.get_parameters(neuron,
                                  (getattr(neuron_parameter, args.parameter_name), )
                                  )

    nplots = len(available_keys)
    nx = 2
    ny = p.ceil(nplots / float(nx))

    plot_idx = 1
    sp = p.subplot(nx, ny, plot_idx)

    for key in sorted(available_keys):
        p.title(key)
        p.plot(x, [i.values()[0][key] for i in experiment.results], 'kx', lw=2, ms=3)
        p.xlabel(args.parameter_name)

        plot_idx += 1
        if plot_idx <= len(available_keys):
            p.subplot(nx, ny, plot_idx, sharex=sp)

    p.tight_layout()
    if args.outfile:
        p.savefig(args.outfile)

    if args.traces or args.outfile_traces:
        p.figure()
        calibrator_array = runner.get(name = args.parameter_name)

        measurements = [
            single_measurement
            for single_calibrator in calibrator_array
            for single_measurement in single_calibrator.experiment.measurements
        ]

        ntr = len(measurements)

        for idx, measurement in enumerate(measurements):
            t, v = measurement.get_trace(neuron)
            color = (float(idx) / len(measurements), 0., 1. - float(idx) / len(measurements))
            p.plot(t, v, label=str(idx), color=color)

        p.legend()
        p.tight_layout()
        if args.outfile_traces:
            p.savefig(args.outfile_traces)

    if not args.outfile:
        p.show()
